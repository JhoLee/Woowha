version: "3.8"

services:
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    restart: always
    networks:
      - team-d
    volumes:
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./redis/data:/var/lib/redis/
      - ./redis/logs:/var/log/redis/
    ports:
      - 6379:6379

  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - team-d
    volumes:
      - ./rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/data:/var/lib/rabbitmq/
      - ./rabbitmq/logs:/var/log/rabbitmq/
    ports:
      - 5672:5672
      - 15672:15672

  postgres_db:
    image: postgres
    restart: always
    networks:
      - team-d
    volumes:
      - ./postgresql/db:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    cap_add:
      - SYS_NICE
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=1234
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8

  webserver:
    build: ./webserver
    #build:
    #context: ./webserver
    #dockerfile: Dockerfile
    image: nginx:latest
    container_name: webserver
    restart: always

    ports:
      - 5000:5000
      #- 8000:8000
    networks:
      - team-d
    depends_on:
      - rabbitmq
      - redis
      - postgres_db
    env_file:
      - app.env
    #restart: on-failure
    volumes:
      - ./webserver/start-dev.sh:/app/start-dev.sh:ro
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./image_input:/data/image_input
      - ./image_output:/data/image_output
      - ./webserver:/app
      - ./webserver/nginx.conf:/etc/nginx/nginx.conf

    command: [sh, /app/start-dev.sh]

  nginx:
    container_name: nginx
    restart: always
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - webserver

  modelserver:
    build:
      context: ./modelserver
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - redis
      - postgres_db
    ports:
      - 5001 # to multiple instances of modelserver (use this opt. '--scale modelserver=3')
    networks:
      - team-d
    env_file:
      - app.env
    restart: on-failure
    volumes:
      - ./modelserver/start-dev.sh:/app/start-dev.sh:ro
      - ./modelserver/load-models.sh:/app/load-models.sh
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./image_input:/data/image_input
      - ./image_output:/data/image_output
      - ./modelserver:/app
    command: [sh, /app/start-dev.sh]

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - team-d
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=ture

networks:
  team-d:
    driver: bridge
